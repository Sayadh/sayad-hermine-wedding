import {
  onMounted,
  ref,
  unref,
  watch
} from "./chunk-5K66ZFVY.js";

// node_modules/vue-use-sound/dist/esm/index.js
function useSound(url, { volume = 1, playbackRate = 1, soundEnabled = true, interrupt = false, onload, ...delegated } = {}) {
  const HowlConstructor = ref(null);
  const isPlaying = ref(false);
  let duration = ref(null);
  let sound = ref(null);
  onMounted(() => {
    import("./howler-878e393d-KUZ5ZCPY.js").then(function(n) {
      return n.h;
    }).then((mod) => {
      HowlConstructor.value = mod.Howl;
      sound.value = new HowlConstructor.value({
        src: [url],
        volume: unref(volume),
        rate: unref(playbackRate),
        onload: handleLoad,
        ...delegated
      });
    });
  });
  const handleLoad = function() {
    if (typeof onload === "function") {
      onload.call(this);
    }
    duration = duration * 1e3;
  };
  watch(() => [url], () => {
    if (HowlConstructor && HowlConstructor.value && sound && sound.value) {
      sound.value = new HowlConstructor.value({
        src: [url],
        volume: unref(volume),
        rate: unref(playbackRate),
        onload: handleLoad,
        ...delegated
      });
    }
  });
  watch(() => [unref(volume), unref(playbackRate)], () => {
    if (sound.value) {
      sound.value.volume(unref(volume));
      sound.value.rate(unref(playbackRate));
    }
  });
  const play = (options) => {
    if (typeof options === "undefined") {
      options = {};
    }
    if (!sound.value || !soundEnabled && !options.forceSoundEnabled) {
      return;
    }
    if (interrupt) {
      sound.value.stop();
    }
    if (options.playbackRate) {
      sound.value.rate(options.playbackRate);
    }
    sound.value.play(options.id);
    sound.value.once("end", () => {
      if (sound && sound.value && !sound.value.playing()) {
        isPlaying.value = false;
      }
    });
    isPlaying.value = true;
  };
  const stop = (id) => {
    if (!sound.value) {
      return;
    }
    sound.value.stop(typeof id === "number" ? id : void 0);
    isPlaying.value = false;
  };
  const pause = (id) => {
    if (!sound.value) {
      return;
    }
    sound.value.pause(typeof id === "number" ? id : void 0);
    isPlaying.value = false;
  };
  const returnedValue = [
    play,
    {
      sound,
      isPlaying,
      duration,
      pause,
      stop
    }
  ];
  return returnedValue;
}
var esm_default = useSound;
export {
  esm_default as default
};
/*! Bundled license information:

vue-use-sound/dist/esm/index.js:
  (*!
    * vue-use-sound v1.1.1
    * (c) 2021 YaÃ«l GUILLOUX
    * @license MIT
    *)
*/
//# sourceMappingURL=vue-use-sound.js.map
